import * as bus from './bus';
import { canvas } from './canvas';
import { add } from './engine';
import { classify } from './rune-model';

function initialize() {
    const data = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007843137718737125, 0.5686274766921997, 0.21176470816135406, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03529411926865578, 0.8352941274642944, 0.8117647171020508, 0.07058823853731155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007843137718737125, 0.0941176488995552, 0.003921568859368563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14509804546833038, 0.9333333373069763, 0.7882353067398071, 0.09803921729326248, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0117647061124444, 0.5490196347236633, 0.9764705896377563, 0.8588235378265381, 0.4941176474094391, 0.003921568859368563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.47058823704719543, 1.0, 0.7764706015586853, 0.0313725508749485, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.49803921580314636, 0.9607843160629272, 0.3921568691730499, 0.8823529481887817, 0.6784313917160034, 0.003921568859368563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0313725508749485, 0.8313725590705872, 1.0, 0.6392157077789307, 0.01568627543747425, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4274509847164154, 0.9686274528503418, 0.3333333432674408, 0.250980406999588, 0.9647058844566345, 0.20392157137393951, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.32549020648002625, 1.0, 0.9921568632125854, 0.501960813999176, 0.003921568859368563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.16078431904315948, 0.9450980424880981, 0.41960784792900085, 0.007843137718737125, 0.7176470756530762, 0.6941176652908325, 0.003921568859368563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03529411926865578, 0.843137264251709, 0.8392156958580017, 0.9607843160629272, 0.46666666865348816, 0.003921568859368563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0117647061124444, 0.7254902124404907, 0.7568627595901489, 0.007843137718737125, 0.364705890417099, 0.9764705896377563, 0.2078431397676468, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4313725531101227, 0.9098039269447327, 0.4627451002597809, 0.9647058844566345, 0.4274509847164154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003921568859368563, 0.4941176474094391, 0.9411764740943909, 0.18431372940540314, 0.364705890417099, 0.95686274766922, 0.4627451002597809, 0.003921568859368563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0313725508749485, 0.8313725590705872, 0.658823549747467, 0.41960784792900085, 0.9529411792755127, 0.1764705926179886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3843137323856354, 0.9725490212440491, 0.33725491166114807, 0.34117648005485535, 0.9686274528503418, 0.47843137383461, 0.003921568859368563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23137255012989044, 0.9607843160629272, 0.3450980484485626, 0.7254902124404907, 0.7450980544090271, 0.01568627543747425, 0.0, 0.0, 0.003921568859368563, 0.40784314274787903, 0.9607843160629272, 0.4431372582912445, 0.2823529541492462, 0.9607843160629272, 0.46666666865348816, 0.003921568859368563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.545098066329956, 0.8901960849761963, 0.2549019753932953, 0.95686274766922, 0.4117647111415863, 0.0, 0.0, 0.4470588266849518, 0.9725490212440491, 0.4274509847164154, 0.01568627543747425, 0.800000011920929, 0.6352941393852234, 0.003921568859368563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03921568766236305, 0.8392156958580017, 0.6039215922355652, 0.4117647111415863, 0.9686274528503418, 0.364705890417099, 0.4431372582912445, 0.9647058844566345, 0.364705890417099, 0.0, 0.34117648005485535, 0.9490196108818054, 0.1411764770746231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3137255012989044, 0.95686274766922, 0.18039216101169586, 0.48235294222831726, 0.9647058844566345, 0.9686274528503418, 0.40392157435417175, 0.0, 0.04313725605607033, 0.8235294222831726, 0.5803921818733215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007843137718737125, 0.7490196228027344, 0.6784313917160034, 0.0117647061124444, 0.4117647111415863, 0.3607843220233917, 0.0, 0.0, 0.5490196347236633, 0.9019607901573181, 0.09803921729326248, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23529411852359772, 0.9764705896377563, 0.23137255012989044, 0.0, 0.0, 0.0, 0.2705882489681244, 0.9607843160629272, 0.32156863808631897, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007843137718737125, 0.6980392336845398, 0.6549019813537598, 0.0, 0.0, 0.07450980693101883, 0.8745098114013672, 0.6000000238418579, 0.003921568859368563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.41960784792900085, 0.8627451062202454, 0.01568627543747425, 0.1568627506494522, 0.800000011920929, 0.8235294222831726, 0.05882352963089943, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.21960784494876862, 0.9607843160629272, 0.41960784792900085, 0.9215686321258545, 0.7450980544090271, 0.10588235408067703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04313725605607033, 0.95686274766922, 0.9843137264251709, 0.5215686559677124, 0.0235294122248888, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.772549033164978, 0.5647059082984924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08235294371843338, 0.03921568766236305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];

    const scaledCanvas = document.createElement("canvas");
    const scaledCtx = scaledCanvas.getContext("2d");
    document.body.appendChild(scaledCanvas);
    scaledCanvas.width = 28;
    scaledCanvas.height = 28;
    const grayscaleArray = new Array(28*28);
    const mapping = {
        0: 'garbage',
        1: 'fireball',
        2: 'meteor',
        3: 'dragon',
        4: 'ice',
        5: 'frost',
        6: 'hail',
        7: 'lightning',
        8: 'tornado',
        9: 'windwalk',
        10: 'transfusion',
        11: 'vine',
        12: 'shockwave',
    };

    add({
        render: (ctx) => {
            // Draw something on the canvas
            ctx.fillStyle = "black";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.beginPath();
            ctx.moveTo(60, canvas.height-60);
            ctx.lineTo(canvas.width/2, 160);
            ctx.lineTo(canvas.width-60, canvas.height-60);
            // ctx.lineTo(canvas.width/2, canvas.height-160);
            // ctx.closePath();
            ctx.strokeStyle = "white";
            ctx.lineWidth = 60;
            ctx.stroke();

            // Draw the subimage on the scaled canvas
            scaledCtx.drawImage(canvas, 0, 0, canvas.width, canvas.height, 0, 0, 28, 28);

            // Convert pixel data to grayscale array
            const scaledImage = scaledCtx.getImageData(0, 0, 28, 28);
            const pixelData = scaledImage.data;
            for (let i = 0; i < pixelData.length; i += 4) {
                grayscaleArray[i>>2] = pixelData[i] / 255.0;
            }

            const z = classify(grayscaleArray);
            const argmax = arr => arr.reduce((iMax, x, i, arr) => x > arr[iMax] ? i : iMax, 0);
            // console.log(mapping[argmax(z)], z);
        }
    })
}
initialize();
